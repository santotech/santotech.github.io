{"meta":{"title":"santotech","subtitle":"There are only two kinds of programming languages.","description":"javascript,css","author":"Santo Monster","url":"http://www.santotech.tech"},"pages":[{"title":"关于Wo","date":"2016-09-14T03:32:06.000Z","updated":"2016-09-21T06:45:18.907Z","comments":false,"path":"about/index.html","permalink":"http://www.santotech.tech/about/index.html","excerpt":"","text":"关于我们的介绍关于我们的介绍关于我们的介绍关于我们的介绍关于我们的介绍关于我们的介绍关于我们的介绍关于我们的介绍关于我们的介绍关于我们的介绍关于我们的介绍关于我们的介绍关于我们的介绍关于我们的介绍关于我们的介绍关于我们的介绍关于我们的介绍关于我们的介绍关于我们的介绍关于我们的介绍关于我们的介绍关于我们的介绍关于我们的介绍关于我们的介绍关于我们的介绍 .col-md-1 .col-md-1 .col-md-1 .col-md-1 .col-md-1 .col-md-1 .col-md-1 .col-md-1 .col-md-1 .col-md-1 .col-md-1 .col-md-1 .col-md-8 .col-md-4 .col-md-4 .col-md-4 .col-md-4 .col-md-6 .col-md-6"},{"title":"messageboard","date":"2016-09-14T05:38:30.000Z","updated":"2016-09-29T03:07:41.578Z","comments":true,"path":"board/index.html","permalink":"http://www.santotech.tech/board/index.html","excerpt":"","text":"人间四月天"},{"title":"分类","date":"2016-09-14T04:33:09.000Z","updated":"2016-09-14T04:35:50.023Z","comments":false,"path":"categories/index.html","permalink":"http://www.santotech.tech/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2016-09-14T04:28:38.000Z","updated":"2016-09-14T04:30:27.840Z","comments":false,"path":"tags/index.html","permalink":"http://www.santotech.tech/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"git-commands","slug":"git-commands","date":"2016-10-19T07:42:26.000Z","updated":"2016-10-19T07:56:09.732Z","comments":true,"path":"2016/10/19/git-commands/","link":"","permalink":"http://www.santotech.tech/2016/10/19/git-commands/","excerpt":"","text":"常用Git命令清单一般来说，日常使用只要记住图下六个命令就可以了，但是熟练使用，恐怕要记住60-100个命令。下面是整理的常用 Git 命令清单。几个专用名词的译名如下：1234Workspace：工作区Index / Stage：暂存区Repository：仓库区（或本地仓库）Remote：远程仓库 新建代码库12345678# 在当前目录新建一个Git代码库$ git init# 新建一个目录，将其初始化为Git代码库$ git init [project-name]# 下载一个项目和它的整个代码历史$ git clone [url] 配置Git的设置文件为.gitconfig，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。123456789# 显示当前的Git配置$ git config --list# 编辑Git配置文件$ git config -e [--global]# 设置提交代码时的用户信息$ git config [--global] user.name &quot;[name]&quot;$ git config [--global] user.email &quot;[email address]&quot; 增加/删除文件123456789101112131415161718192021# 添加指定文件到暂存区$ git add [file1] [file2] ...# 添加指定目录到暂存区，包括子目录$ git add [dir]# 添加当前目录的所有文件到暂存区$ git add .# 添加每个变化前，都会要求确认# 对于同一个文件的多处变化，可以实现分次提交$ git add -p# 删除工作区文件，并且将这次删除放入暂存区$ git rm [file1] [file2] ...# 停止追踪指定文件，但该文件会保留在工作区$ git rm --cached [file]# 改名文件，并且将这个改名放入暂存区$ git mv [file-original] [file-renamed] 代码提交123456789101112131415161718# 提交暂存区到仓库区$ git commit -m [message]# 提交暂存区的指定文件到仓库区$ git commit [file1] [file2] ... -m [message]# 提交工作区自上次commit之后的变化，直接到仓库区$ git commit -a# 提交时显示所有diff信息$ git commit -v# 使用一次新的commit，替代上一次提交# 如果代码没有任何新变化，则用来改写上一次commit的提交信息$ git commit --amend -m [message]# 重做上一次commit，并包括指定文件的新变化$ git commit --amend [file1] [file2] ... 分支123456789101112131415161718192021222324252627282930313233343536373839404142# 列出所有本地分支$ git branch# 列出所有远程分支$ git branch -r# 列出所有本地分支和远程分支$ git branch -a# 新建一个分支，但依然停留在当前分支$ git branch [branch-name]# 新建一个分支，并切换到该分支$ git checkout -b [branch]# 新建一个分支，指向指定commit$ git branch [branch] [commit]# 新建一个分支，与指定的远程分支建立追踪关系$ git branch --track [branch] [remote-branch]# 切换到指定分支，并更新工作区$ git checkout [branch-name]# 切换到上一个分支$ git checkout -# 建立追踪关系，在现有分支与指定的远程分支之间$ git branch --set-upstream [branch] [remote-branch]# 合并指定分支到当前分支$ git merge [branch]# 选择一个commit，合并进当前分支$ git cherry-pick [commit]# 删除分支$ git branch -d [branch-name]# 删除远程分支$ git push origin --delete [branch-name]$ git branch -dr [remote/branch] 标签1234567891011121314151617181920212223242526# 列出所有tag$ git tag# 新建一个tag在当前commit$ git tag [tag]# 新建一个tag在指定commit$ git tag [tag] [commit]# 删除本地tag$ git tag -d [tag]# 删除远程tag$ git push origin :refs/tags/[tagName]# 查看tag信息$ git show [tag]# 提交指定tag$ git push [remote] [tag]# 提交所有tag$ git push [remote] --tags# 新建一个分支，指向某个tag$ git checkout -b [branch] [tag] 查看信息123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960# 显示有变更的文件$ git status# 显示当前分支的版本历史$ git log# 显示commit历史，以及每次commit发生变更的文件$ git log --stat# 搜索提交历史，根据关键词$ git log -S [keyword]# 显示某个commit之后的所有变动，每个commit占据一行$ git log [tag] HEAD --pretty=format:%s# 显示某个commit之后的所有变动，其&quot;提交说明&quot;必须符合搜索条件$ git log [tag] HEAD --grep feature# 显示某个文件的版本历史，包括文件改名$ git log --follow [file]$ git whatchanged [file]# 显示指定文件相关的每一次diff$ git log -p [file]# 显示过去5次提交$ git log -5 --pretty --oneline# 显示所有提交过的用户，按提交次数排序$ git shortlog -sn# 显示指定文件是什么人在什么时间修改过$ git blame [file]# 显示暂存区和工作区的差异$ git diff# 显示暂存区和上一个commit的差异$ git diff --cached [file]# 显示工作区与当前分支最新commit之间的差异$ git diff HEAD# 显示两次提交之间的差异$ git diff [first-branch]...[second-branch]# 显示今天你写了多少行代码$ git diff --shortstat &quot;@&#123;0 day ago&#125;&quot;# 显示某次提交的元数据和内容变化$ git show [commit]# 显示某次提交发生变化的文件$ git show --name-only [commit]# 显示某次提交时，某个文件的内容$ git show [commit]:[filename]# 显示当前分支的最近几次提交$ git reflog 远程同步1234567891011121314151617181920212223# 下载远程仓库的所有变动$ git fetch [remote]# 显示所有远程仓库$ git remote -v# 显示某个远程仓库的信息$ git remote show [remote]# 增加一个新的远程仓库，并命名$ git remote add [shortname] [url]# 取回远程仓库的变化，并与本地分支合并$ git pull [remote] [branch]# 上传本地指定分支到远程仓库$ git push [remote] [branch]# 强行推送当前分支到远程仓库，即使有冲突$ git push [remote] --force# 推送所有分支到远程仓库$ git push [remote] --all 撤销12345678910111213141516171819202122232425262728293031# 恢复暂存区的指定文件到工作区$ git checkout [file]# 恢复某个commit的指定文件到暂存区和工作区$ git checkout [commit] [file]# 恢复暂存区的所有文件到工作区$ git checkout .# 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变$ git reset [file]# 重置暂存区与工作区，与上一次commit保持一致$ git reset --hard# 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变$ git reset [commit]# 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致$ git reset --hard [commit]# 重置当前HEAD为指定commit，但保持暂存区和工作区不变$ git reset --keep [commit]# 新建一个commit，用来撤销指定commit# 后者的所有变化都将被前者抵消，并且应用到当前分支$ git revert [commit]# 暂时将未提交的变化移除，稍后再移入$ git stash$ git stash pop 其他12# 生成一个可供发布的压缩包$ git archive","categories":[{"name":"Notes","slug":"Notes","permalink":"http://www.santotech.tech/categories/Notes/"}],"tags":[{"name":"storage","slug":"storage","permalink":"http://www.santotech.tech/tags/storage/"}],"keywords":[{"name":"Notes","slug":"Notes","permalink":"http://www.santotech.tech/categories/Notes/"}]},{"title":"offline-storage","slug":"offline-storage","date":"2016-10-19T06:42:49.000Z","updated":"2016-10-19T09:16:20.159Z","comments":true,"path":"2016/10/19/offline-storage/","link":"","permalink":"http://www.santotech.tech/2016/10/19/offline-storage/","excerpt":"","text":"什么是离线存储离线存储，就是将指定的网页文件（例如css、js）保存到本地，当用户没有网络时，依旧可以通过浏览器使用这些文件。 为何要使用离线存储从网站所有者的角度来说，增加离线存储功能，能够让用户更好的使用网站。 离线存储的设置步骤 配置manifest文件 通过Js进行缓存的控制 manifest文件的配置 添加manifest属性将需要离线存储的文件罗列下来，存储于后缀名为manifest的文件当中，在HTML文件中引入manifest文件1&lt;html manifest=\"test.manifest\"&gt; manifest文件的基本组成 基本语法： 12345678CACHE MANIFEST# 该符号后面的内容为注释信息，第一行的CACHE MANIFEST不能少CACHE:# 需要缓存的文件NETWORK:# 不需要缓存的文件FALLBACK:# 当页面无法访问时的回退页面/重定向 代码示例 123456789CACHE MANIFESTCACHE:../test.html../css/reset.css../css/test.css# 需要注意的是：manifest文件中书写的路径，是以该文件的路径为基础，而非以html所在文件夹为基础NETWORK:../images/logo.jpgFALLBACK 离线存储工作流程 使用Javascript控制缓存缓存的各类属性和事件，均绑定在”applicationCache”上 涉及缓存的属性applicationCache.status用于便是当前的缓存状态，取值范围为0-5. 0代表未缓存，通常是这些页面没有运用离线缓存技术，就是这个状态。 1代表空闲，当缓存是最新的时候为1，不需要做什么操作。 2代表检查中，即浏览器在检查manifest文件是否为最新。 3代表下载中，当前有更新，并且正在下载。 4代表更新就绪，代表当前有更新，并且已经下载完毕。等待下次载入页面时候，进行更新。 5代表缓存过期，即找不到正确的缓存文件时候，会变成5.涉及缓存的事件 update 用于主动更新缓存。 updateready 当有新的缓存，并更新完毕之后，会触发此事件。 progress 进度事件，当进行缓存的下载时，会不断的触发该事件。progress中的event对象包含：loaded。loaded代表当前已经加载完毕的文件，total总共需要更新的文件数。 checking 正在检查 downloading 正在下载。 obsolete 缓存过期。 cached 空闲，缓存为最新状态。 error 报错。 noupdate 检查更新结束，不需要更新。部分事件使用案例代码：123456789101112// update事件使用案例applicationCache.update();// updateready事件使用案例application.addEventListener(&apos;updateready&apos;, function()&#123; console.log(&apos;已完成缓存的更新&apos;);&#125;, false);// progress事件使用案例application.addEventListener(&apos;progress&apos;, function()&#123; console.log(applicationCache.status);&#125;, false);","categories":[{"name":"Notes","slug":"Notes","permalink":"http://www.santotech.tech/categories/Notes/"}],"tags":[{"name":"storage","slug":"storage","permalink":"http://www.santotech.tech/tags/storage/"}],"keywords":[{"name":"Notes","slug":"Notes","permalink":"http://www.santotech.tech/categories/Notes/"}]},{"title":"Css-Horizontal-vertical-center","slug":"Css-Horizontal-vertical-center","date":"2016-10-18T08:18:43.000Z","updated":"2016-10-18T08:32:38.207Z","comments":true,"path":"2016/10/18/Css-Horizontal-vertical-center/","link":"","permalink":"http://www.santotech.tech/2016/10/18/Css-Horizontal-vertical-center/","excerpt":"","text":"七种css方式让一个容器水平垂直居中方法一：position加margin123&lt;div class=\"wrap\"&gt; &lt;div class=\"center\"&gt;&lt;/div&gt;&lt;/div&gt; 1234567891011121314151617.wrap &#123; width: 200px; height: 200px; background: yellow; position: relative;&#125;.wrap .center &#123; width: 100px; height: 100px; background: green; margin: auto; position: absolute; left: 0; right: 0; top: 0; bottom: 0;&#125; 兼容性：主流浏览器均支持，IE6不支持 方法二： diaplay:table-cell123&lt;div class=\"wrap\"&gt; &lt;div class=\"center\"&gt;&lt;/div&gt;&lt;/div&gt; 123456789101112131415.wrap&#123; width: 200px; height: 200px; background: yellow; display: table-cell; vertical-align: middle; text-align: center;&#125;.center&#123; display: inline-block; vertical-align: middle; width: 100px; height: 100px; background: green;&#125; 兼容性：由于display:table-cell的原因，IE67不兼容 方法三：position加 transform123&lt;div class=\"wrap\"&gt; &lt;div class=\"center\"&gt;&lt;/div&gt;&lt;/div&gt; 12345678910111213141516.wrap &#123; position: relative; background: yellow; width: 200px; height: 200px;&#125;.center &#123; position: absolute; background: green; top:50%; left:50%; -webkit-transform:translate(-50%,-50%); transform:translate(-50%,-50%); width: 100px; height: 100px;&#125; 兼容性：ie9以下不支持 transform，手机端表现的比较好。 方法四：flex;align-items: center;justify-content: center123&lt;div class=\"wrap\"&gt; &lt;div class=\"center\"&gt;&lt;/div&gt;&lt;/div&gt; 1234567891011121314.wrap &#123; background: yellow; width: 200px; height: 200px; display: flex; align-items: center; justify-content: center;&#125;.center &#123; background: green; width: 100px; height: 100px;&#125; 移动端首选 方法五：display:flex;margin:auto123&lt;div class=\"wrap\"&gt; &lt;div class=\"center\"&gt;&lt;/div&gt;&lt;/div&gt; 12345678910111213.wrap &#123; background: yellow; width: 200px; height: 200px; display: flex;&#125;.center &#123; background: green; width: 100px; height: 100px; margin: auto;&#125; 移动端首选 方法六：纯position123&lt;div class=\"wrap\"&gt; &lt;div class=\"center\"&gt;&lt;/div&gt;&lt;/div&gt; 123456789101112131415161718192021222324252627.wrap &#123; background: yellow; width: 200px; height: 200px; position: relative;&#125;/**方法一**/.center &#123; background: green; position: absolute; width: 100px; height: 100px; left: 50px; top: 50px;&#125;/**方法二**/.center &#123; background: green; position: absolute; width: 100px; height: 100px; left: 50%; top: 50%; margin-left:-50px; margin-top:-50px;&#125; 兼容性：适用于所有浏览器方法六中的方法一计算公式如下： 子元素（conter）的left值计算公式：left=(父元素的宽 - 子元素的宽 ) / 2=(200-100) / 2=50px; 子元素（conter）的top值计算公式：top=(父元素的高 - 子元素的高 ) / 2=(200-100) / 2=50px; 方法二计算公式：left值固定为50%;子元素的margin-left= -（子元素的宽/2）=-100/2= -50px;top值也一样，固定为50% 子元素的margin-top= -（子元素的高/2）=-100/2= -50px 方法七：兼容低版本浏览器，不固定宽高12345&lt;div class=\"table\"&gt; &lt;div class=\"tableCell\"&gt; &lt;div class=\"content\"&gt;不固定宽高，自适应&lt;/div&gt; &lt;/div&gt;&lt;/div&gt; 123456789101112131415161718192021222324.table &#123; height: 200px;/*高度值不能少*/ width: 200px;/*宽度值不能少*/ display: table; position: relative; float:left; background: yellow;&#125; .tableCell &#123; display: table-cell; vertical-align: middle; text-align: center; *position: absolute; padding: 10px; *top: 50%; *left: 50%;&#125;.content &#123; *position:relative; *top: -50%; *left: -50%; background: green;&#125;","categories":[{"name":"Css","slug":"Css","permalink":"http://www.santotech.tech/categories/Css/"}],"tags":[{"name":"css","slug":"css","permalink":"http://www.santotech.tech/tags/css/"}],"keywords":[{"name":"Css","slug":"Css","permalink":"http://www.santotech.tech/categories/Css/"}]},{"title":"Website-ESO","slug":"Website-ESO","date":"2016-10-13T06:00:09.000Z","updated":"2016-10-18T06:46:15.526Z","comments":true,"path":"2016/10/13/Website-ESO/","link":"","permalink":"http://www.santotech.tech/2016/10/13/Website-ESO/","excerpt":"","text":"WEB前端性能优化 一般说来Web前端指网站业务逻辑之前的部分，包括浏览器加载、网站视图模型、图片服务、CDN服务等，主要优化手段有优化浏览器访问、使用反向代理、CDN等。 浏览器访问优化减少http请求 HTTP协议是无状态的应用层协议，意味着每次HTTP请求都需要建立通信链路、进行数据传输，而在服务器端，每一个HTTP都需要启动独立的线程去处理。这些通信和服务的开销都很昂贵，减少HTTP请求的数目可有效提高访问性能。 减少HTTP的主要手段是合并CSS、合并javascript、合并图片。将浏览器一次访问需要的javascript、css合并成一个文件，这样浏览器就只要一次请求。图片也是可以合并，多张图片合成一张，如果每张图片都有不同的超链接，可以通过css偏移响应鼠标点击操作，构造不同的url。 使用浏览器缓存 对一个网站而言，css、javascript、logo、图标这些静态资源文件更新的频率都比较低，而这些文件几乎每次HTTP请求都需要的，如果将这些文件缓存在浏览器中，可以极好地改善性能。通过设置HTTP头中的Cache-Control和Expires的属性，可设定浏览器缓存，缓存时间可以是数天，甚至是几个月。 在某些时候，静态资源文件变化需要及时应用到客户端浏览器，这种情况，可通过改变文件名实现，即更新javascript文件并不是更新javascript文件内容，而是生成一个新的js文件并更新HTML文件中的引用。 使用浏览器缓存策略的网站在更新静态资源时，采用批量更新的方法，比如需要更新10个图标文件，不宜把10个文件一次全部更新，而是一个文件一个文件逐步更新，并有一定时间间隔，以免用户浏览器突然大量缓存失效，集中更新缓存，造成服务负载聚增、网络堵塞的情况。 启用压缩 在服务端对文件进行压缩，在浏览器端对文件解压，可有效减少通信传输的数据量。文本文件的压缩率可达80%以上，因此HTML、CSS、Javascript文件启用GZip压缩可达到较好的效果。但是压缩对服务器和浏览器产生一定的压力，在通信带宽良好，而服务器资源不足的情况下要权衡考虑。 Css放在页面最上面、Javascript放在页面最下面 浏览器会在下载完全部Css后才对整个页面进行渲染，因此最好的方法是将Css放在页面最上面，让浏览器尽快下载Css。Javascript则相反，浏览器再加载Javascript后立即执行，有可能会阻塞整个页面，造成页面显示缓慢，因此Javascript最好放在页面最下面。但如果页面解析时候需要用到Javascript，这时候放在低不就不适了。 减少Cookie传输 一方面，Cookie包含在每次请求和响应中，太大的Cookie会严重影响数据传输，因此哪些数据需要写入Cookie需要慎重考虑，尽量减少Cookie中传输带数据量。另一方面，对于某些静态资源的访问，如Css、Script等，发送Cookie没有意义，可以考虑静态资源使用独立域名访问，避免请求静态资源时发送Cookie，减少Cookie传输的次数。 CDN加速CDN（Content Distribute Network，内容分发网络）的本质仍然是一个缓存，而且将数据缓存在离用户最近的地方，使用户以最快的速度获取数据，即所谓网络访问第一跳，如图所示 由于CDN部署在网络运营的机房，这些运营商又是终端用户的网络服务提供商，因此用户请求路由的第一跳就到达了CDN服务器，当CDN中存在浏览器请求的资源时，从CDN直接返回给浏览器，最短路径返回响应，加快用户访问速度，减少数据中心负载压力。CDN能够缓存的一般是静态资源，如图片，文件，Css，Script脚本、静态网页等，但是这些文件访问频率度很高，将其缓存在CDN可极大改善网页的打开速度。 反向代理传统代理服务器位于浏览器一侧，代理浏览器将HTTP请求发送到互联网上，而反向代理服务器位于网站机房一侧，代理网站Web服务器接收HTTP请求。如图所以 和传统代理服务器可以保护浏览器安全一样，反向代理服务器也具有保护网站安全的作用，来自互联网的访问请求必须经过代理服务器，相当于在Web服务器和可能的网络攻击之间建立一个屏障。除了安全功能，代理服务器也可以通过配置缓存功能加速Web请求。当用户第一次访问静态内容的时候，静态内容就被缓存在反向代理服务器上，这样当其他用户访问该静态内容的时候，就可以直接从反向代理服务器返回，加速Web请求响应速度，减轻Web服务器负载压力。事实上，有些网站会把动态内容也缓存在代理服务器上，比如维基百科及某些博客论坛网站，把热门词条、帖子、博客缓存在反向代理服务器上加速用户访问速度，当这些动态内容有变化时，用过内部通知机制通知反向代理缓存失败，反向代理会重新加载最新的动态内容再次缓存起来。此外，反向代理也可以实现负载均衡的功能，而通过负载均衡构建的应用集群可以提高系统总体处理能力，进而改善网站高并发情况下的性能。","categories":[{"name":"Notes","slug":"Notes","permalink":"http://www.santotech.tech/categories/Notes/"}],"tags":[{"name":"seo","slug":"seo","permalink":"http://www.santotech.tech/tags/seo/"}],"keywords":[{"name":"Notes","slug":"Notes","permalink":"http://www.santotech.tech/categories/Notes/"}]},{"title":"VIM教程","slug":"vim","date":"2016-09-29T08:36:13.000Z","updated":"2016-10-18T06:31:50.598Z","comments":true,"path":"2016/09/29/vim/","link":"","permalink":"http://www.santotech.tech/2016/09/29/vim/","excerpt":"","text":"《VIM教程》- 版本 1.7 Vim 是一个具有很多命令的功能非常强大的编辑器。限于篇幅，在本教程当中 就不详细介绍了。本教程的设计目标是讲述一些必要的基本命令，而掌握好这 些命令，您就能够很容易地将 Vim 当作一个通用编辑器来使用了。 完成本教程的内容大约需要25-30分钟，取决于您训练的时间。 注意： 每一节的命令操作将会更改本文。推荐您复制本文的一个副本，然后在副本上 进行训练(如果您是通过”vimtutor”来启动教程的，那么本文就已经是副本了)。 切记一点： 本教程的设计思路是在使用中进行学习的。也就是说，您需要通过 执行命令来学习它们本身的正确用法。如果您只是阅读而不操作，那么您可能 会很快遗忘这些命令的！ 好了，现在请确定您的Shift-Lock(大小写锁定键)还没有按下，然后按键盘上 的字母键 j 足够多次来移动光标，直到第一节的内容能够完全充满屏幕。 第一讲小结1234567891011121314151617 1. 光标在屏幕文本中的移动既可以用箭头键，也可以使用 hjkl 字母键。 h (左移) j (下行) k (上行) l (右移) 2. 欲进入 Vim 编辑器(从命令行提示符)，请输入：vim 文件名 &lt;回车&gt; 3. 欲退出 Vim 编辑器，请输入 &lt;ESC&gt; :q! &lt;回车&gt; 放弃所有改动。 或者输入 &lt;ESC&gt; :wq &lt;回车&gt; 保存改动。 4. 在正常模式下删除光标所在位置的字符，请按： x 5. 欲插入或添加文本，请输入： i 输入欲插入文本 &lt;ESC&gt; 在光标前插入文本 A 输入欲添加文本 &lt;ESC&gt; 在一行后添加文本特别提示：按下 &lt;ESC&gt; 键会带您回到正常模式或者撤消一个不想输入或部分完整的命令。 第一讲第一节：移动光标123456789101112131415161718192021 ** 要移动光标，请依照说明分别按下 h、j、k、l 键。 ** ^ k 提示： h 的键位于左边，每次按下就会向左移动。 &lt; h l &gt; l 的键位于右边，每次按下就会向右移动。 j j 键看起来很象一支尖端方向朝下的箭头。 v 1. 请随意在屏幕内移动光标，直至您觉得舒服为止。 2. 按下下行键(j)，直到出现光标重复下行。---&gt; 现在您应该已经学会如何移动到下一讲吧。 3. 现在请使用下行键，将光标移动到第一讲第二节。提示：如果您不敢确定您所按下的字母，请按下&lt;ESC&gt;键回到正常(Normal)模式。 然后再次从键盘输入您想要的命令。提示：光标键应当也能正常工作的。但是使用hjkl键，在习惯之后您就能够更快 地在屏幕内四处移动光标。真的是这样！ 第一讲第二节：VIM的进入和退出1234567891011121314151617 !! 特别提示：敬请阅读本一节的完整内容，然后再执行以下所讲解的命令。 1. 按&lt;ESC&gt;键(这是为了确保您处在正常模式)。 2. 然后输入： :q! &lt;回车&gt; 这种方式的退出编辑器会丢弃您进入编辑器以来所做的改动。 3. 如果您看到了命令行提示符，请输入能够带您回到本教程的命令，那就是： vimtutor &lt;回车&gt; 4. 如果您自信已经牢牢记住了这些步骤的话，请从步骤1执行到步骤3退出，然 后再次进入编辑器。提示： :q! &lt;回车&gt; 会丢弃您所做的任何改动。几讲之后您将学会如何保存改动到文件。 5. 将光标下移到第一讲第三节。 第一讲第三节：文本编辑之删除12345678910111213141516 ** 在正常(Normal)模式下，可以按下 x 键来删除光标所在位置的字符。** 1. 请将光标移动到本节中下面标记有 ---&gt; 的那一行。 2. 为了修正输入错误，请将光标移至准备删除的字符的位置处。 3. 然后按下 x 键将错误字符删除掉。 4. 重复步骤2到步骤4，直到句子修正为止。---&gt; The ccow jumpedd ovverr thhe mooon. 5. 好了，该行已经修正了，下面是第一讲第四节。特别提示：在浏览本教程时，不要强行记忆。记住一点：在使用中学习。 第一讲第四节：文本编辑之插入1234567891011121314151617 ** 在正常模式下，可以按下 i 键来插入文本。** 1. 请将光标移动到本节中下面标记有 ---&gt; 的第一行。 2. 为了使得第一行内容雷同于第二行，请将光标移至文本第一个准备插入字符 的位置。 3. 然后按下 i 键，接着输入必要的文本字符。 4. 每个错误修正完毕后，请按下 &lt;ESC&gt; 键返回正常模式。 重复步骤2至步骤4以便修正句子。---&gt; There is text misng this .---&gt; There is some text missing from this line. 5. 如果您对文本插入操作已经很满意，请接着阅读下面的第一讲第五节。 第一讲第五节：文本编辑之添加123456789101112131415161718 ** 按 A 键以添加文本。 ** 1. 移动光标到下面第一个标记有 ---&gt; 的一行。 光标放在那一行的哪个字符上并不重要。 2. 按 A 键输入必要的添加内容。 3. 文本添加完毕后，按 &lt;ESC&gt; 键回到正常模式。 4. 移动光标到下面第二个标记有 ---&gt; 的一行。重复步骤2和步骤3以改正这个句子。---&gt; There is some text missing from th There is some text missing from this line.---&gt; There is also some text miss There is also some text missing here. 5. 当您对添加文本操作感到满意时，请继续学习第一讲第六节。 第一讲第六节：编辑文件12345678910111213141516171819 ** 使用 :wq 以保存文件并退出。 **特别提示：在执行以下步骤之前，请先读完整个小节！1. 如您在第一讲第二节中所做的那样退出本教程： :q! 或者，如果您可以访问另一个终端，请在那里执行以下操作。2. 在 shell 的提示符下输入命令： vim tutor &lt;回车&gt; &apos;vim&apos;是启动 Vim 编辑器的命令，&apos;tutor&apos;是您希望编辑的文件的名字。 请使用一个可以改动的文件。3. 使用您在前面的教程中学到的命令插入删除文本。4. 保存改动过的文件并退出 Vim，按这些键： :wq &lt;回车&gt;5. 如果您在步骤1中已经退出 vimtutor，请重启 vimtutor 移动到下面的小结一节。6. 阅读完以上步骤，弄懂它们的意义，然后在实践中进行练习。 第二讲小结123456789101112131415161718191. 欲从当前光标删除至下一个单词，请输入：dw2. 欲从当前光标删除至当前行末尾，请输入：d$3. 欲删除整行，请输入：dd4. 欲重复一个动作，请在它前面加上一个数字：2w5. 在正常模式下修改命令的格式是： operator [number] motion 其中： operator - 操作符，代表要做的事情，比如 d 代表删除 [number] - 可以附加的数字，代表动作重复的次数 motion - 动作，代表在所操作的文本上的移动，例如 w 代表单词(word)， $ 代表行末等等。6. 欲移动光标到行首，请按数字0键：07. 欲撤消以前的操作，请输入：u (小写的u) 欲撤消在一行中所做的改动，请输入：U (大写的U) 欲撤消以前的撤消命令，恢复以前的操作结果，请输入：CTRL-R 第二讲第一节：删除类命令123456789101112131415161718 ** 输入 dw 可以从光标处删除至一个单词的末尾。** 1. 请按下 &lt;ESC&gt; 键确保您处于正常模式。 2. 请将光标移动到本节中下面标记有 ---&gt; 的那一行。 3. 请将光标移至准备要删除的单词的起始处。 4. 接着输入 dw 删除掉该单词。 特别提示：当您输入时，字母 d 会同时出现在屏幕的最后一行。Vim 在等待您输入 字母 w。如果您看到的是除 d 外的其他字符，那表明您按错了；请按下 &lt;ESC&gt; 键， 然后重新再来。---&gt; There are a some words fun that don&apos;t belong paper in this sentence. 5. 重复步骤3和步骤4，直至句子修正完毕。接着继续第二讲第二节内容。 第二讲第二节：更多删除类命令123456789101112131415 ** 输入 d$ 从当前光标删除到行末。** 1. 请按下 &lt;ESC&gt; 键确保您处于正常模式。 2. 请将光标移动到本节中下面标记有 ---&gt; 的那一行。 3. 请将光标移动到该行的尾部(也就是在第一个点号‘.’后面)。 4. 然后输入 d$ 从光标处删至当前行尾部。---&gt; Somebody typed the end of this line twice. end of this line twice. 5. 请继续学习第二讲第三节就知道是怎么回事了。 第二讲第三节：关于命令和对象1234567891011121314151617181920 许多改变文本的命令都由一个操作符和一个动作构成。 使用删除操作符 d 的删除命令的格式如下： d motion 其中： d - 删除操作符。 motion - 操作符的操作对象(在下面列出)。 一个简短的动作列表： w - 从当前光标当前位置直到下一个单词起始处，不包括它的第一个字符。 e - 从当前光标当前位置直到单词末尾，包括最后一个字符。 $ - 从当前光标当前位置直到当前行末。 因此输入 de 会从当前光标位置删除到单词末尾。特别提示： 对于勇于探索者，请在正常模式下面仅按代表相应动作的键而不使用操作符，您 将看到光标的移动正如上面的对象列表所代表的一样。 第二讲第四节：使用计数指定动作12345678910111213141516 ** 在动作前输入数字会使它重复那么多次。 ** 1. 移动光标到下面标记有 ---&gt; 的一行的开始。 2. 输入 2w 使光标向前移动两个单词。 3. 输入 3e 使光标向前移动到第三个单词的末尾。 4. 输入 0 (数字零) 移动光标到行首。 5. 重复步骤2和步骤3，尝试不同的数字。---&gt; This is just a line with words you can move around in. 6. 请继续学习第二讲第五节。 第二讲第五节：使用计数以删除更多123456789101112131415 ** 使用操作符时输入数字可以使它重复那么多次。 ** 上面已经提到过删除操作符和动作的组合，您可以在组合中动作之前插入一个数字以 删除更多： d number(数字) motion 1. 移动光标到下面标记有 ---&gt; 的一行中第一个大写字母单词上。 2. 输入 d2w 以删除两个大写字母单词。 3. 重复步骤1和步骤2，使用不同的数字使得用一个命令就能删除全部相邻的大写字母 单词---&gt; this ABC DE line FGHI JK LMN OP of words is Q RS TUV cleaned up. 第二讲第六节：操作整行123456789101112131415161718 ** 输入 dd 可以删除整一个当前行。 ** 鉴于整行删除的高频度，Vi 的设计者决定要简化整行删除操作，您仅需要在同一行上 击打两次 d 就可以删除掉光标所在的整行了。 1. 请将光标移动到本节中下面的短句段落中的第二行。 2. 输入 dd 删除该行。 3. 然后移动到第四行。 4. 接着输入 2dd 删除两行。---&gt; 1) Roses are red,---&gt; 2) Mud is fun,---&gt; 3) Violets are blue,---&gt; 4) I have a car,---&gt; 5) Clocks tell time,---&gt; 6) Sugar is sweet---&gt; 7) And so are you. 第二讲第七节：撤消类命令12345678910111213141516 ** 输入 u 来撤消最后执行的命令，输入 U 来撤消对整行的修改。 ** 1. 请将光标移动到本节中下面标记有 ---&gt; 的那一行，并将其置于第一个错误 处。 2. 输入 x 删除第一个不想保留的字母。 3. 然后输入 u 撤消最后执行的(一次)命令。 4. 这次要使用 x 修正本行的所有错误。 5. 现在输入一个大写的 U ，恢复到该行的原始状态。 6. 接着多次输入 u 以撤消 U 以及更前的命令。 7. 然后多次输入 CTRL-R (先按下 CTRL 键不放开，接着按 R 键)，这样就 可以重做被撤消的命令，也就是撤消掉撤消命令。---&gt; Fiix the errors oon thhis line and reeplace them witth undo. 8. 这些都是非常有用的命令。下面是第二讲的小结了。 第三讲小结1234567891011121314151. 要重新置入已经删除的文本内容，请按小写字母 p 键。该操作可以将已删除 的文本内容置于光标之后。如果最后一次删除的是一个整行，那么该行将置 于当前光标所在行的下一行。2. 要替换光标所在位置的字符，请输入小写的 r 和要替换掉原位置字符的新字 符即可。3. 更改类命令允许您改变从当前光标所在位置直到动作指示的位置中间的文本。 比如输入 ce 可以替换当前光标到单词的末尾的内容；输入 c$ 可以替换当 前光标到行末的内容。4. 更改类命令的格式是： c [number] motion 第三讲第一节：置入类命令1234567891011121314151617 ** 输入 p 将最后一次删除的内容置入光标之后。 ** 1. 请将光标移动到本节中下面第一个标记有 ---&gt; 的一行。 2. 输入 dd 将该行删除，这样会将该行保存到 Vim 的一个寄存器中。 3. 接着将光标移动到 c) 一行，即准备置入的位置的上方。记住：是上方哦。 4. 然后在正常模式下(&lt;ESC&gt;键进入)输入 p 将该行粘贴置入。 5. 重复步骤2至步骤4，将所有的行依序放置到正确的位置上。---&gt; d) Can you learn too?---&gt; b) Violets are blue,---&gt; c) Intelligence is learned,---&gt; a) Roses are red, 第三讲第二节：替换类命令1234567891011121314151617 ** 输入 r 和一个字符替换光标所在位置的字符。** 1. 请将光标移动到本节中下面标记有 ---&gt; 的第一行。 2. 请移动光标到第一个出错的位置。 3. 接着输入 r 和要替换成的字符，这样就能将错误替换掉了。 4. 重复步骤2和步骤3，直到第一行已经修改完毕。---&gt; Whan this lime was tuoed in, someone presswd some wrojg keys!---&gt; When this line was typed in, someone pressed some wrong keys! 5. 然后我们继续学习第三讲第三节。特别提示：切记您要在使用中学习，而不是在记忆中学习。 第三讲第三节：更改类命令1234567891011121314151617 ** 要改变文本直到一个单词的末尾，请输入 ce ** 1. 请将光标移动到本节中下面标记有 ---&gt; 的第一行。 2. 接着把光标放在单词 lubw 的字母 u 的位置那里。 3. 然后输入 cw 以及正确的单词(在本例中是输入 ine )。 4. 最后按 &lt;ESC&gt; 键，然后光标定位到下一个错误第一个准备更改的字母处。 5. 重复步骤3和步骤4，直到第一个句子完全雷同第二个句子。---&gt; This lubw has a few wptfd that mrrf changing usf the change operator.---&gt; This line has a few words that need changing using the change operator.提示：请注意 ce 命令不仅仅是删除了一个单词，它也让您进入插入模式了。 第三讲第四节：使用c更改更多1234567891011121314151617 ** 更改类操作符可以与删除中使用的同样的动作配合使用。 ** 1. 更改类操作符的工作方式跟删除类是一致的。操作格式是： c [number] motion 2. 动作参数(motion)也是一样的，比如 w 代表单词，$代表行末等等。 3. 请将光标移动到本节中下面标记有 ---&gt; 的第一行。 4. 接着将光标移动到第一个错误处。 5. 然后输入 c$ 使得该行剩下的部分更正得同第二行一样。最后按 &lt;ESC&gt; 键。---&gt; The end of this line needs some help to make it like the second.---&gt; The end of this line needs to be corrected using the c$ command. 第四讲小结123456789101112131415161718191. CTRL-G 用于显示当前光标所在位置和文件状态信息。 G 用于将光标跳转至文件最后一行。 先敲入一个行号然后输入大写 G 则是将光标移动至该行号代表的行。 gg 用于将光标跳转至文件第一行。2. 输入 / 然后紧随一个字符串是在当前所编辑的文档中正向查找该字符串。 输入 ? 然后紧随一个字符串则是在当前所编辑的文档中反向查找该字符串。 完成一次查找之后按 n 键是重复上一次的命令，可在同一方向上查 找下一个匹配字符串所在；或者按大写 N 向相反方向查找下一匹配字符串所在。 CTRL-O 带您跳转回较旧的位置，CTRL-I 则带您到较新的位置。3. 如果光标当前位置是括号(、)、[、]、&#123;、&#125;，按 % 会将光标移动到配对的括号上。4. 在一行内替换头一个字符串 old 为新的字符串 new，请输入 :s/old/new 在一行内替换所有的字符串 old 为新的字符串 new，请输入 :s/old/new/g 在两行内替换所有的字符串 old 为新的字符串 new，请输入 :#,#s/old/new/g 在文件内替换所有的字符串 old 为新的字符串 new，请输入 :%s/old/new/g 进行全文替换时询问用户确认每个替换需添加 c 标志 :%s/old/new/gc 第四讲第一节：定位及文件状态1234567891011121314151617181920 ** 输入 CTRL-G 显示当前编辑文件中当前光标所在行位置以及文件状态信息。 输入大写 G 则直接跳转到文件中的某一指定行。** 提示：切记要先通读本节内容，之后才可以执行以下步骤!!! 1. 按下 CTRL 键不放开然后按 g 键。我们称这个键组合为 CTRL-G。 您会看到页面最底部出现一个状态信息行，显示的内容是当前编辑的文件名 和文件中光标位置。请记住行号，它会在步骤3中用到。提示：您也许会在屏幕的右下角看到光标位置，这会在 &apos;ruler&apos; 选项设置时发生 (参见 :help &apos;ruler&apos;) 2. 输入大写 G 可以使得当前光标直接跳转到文件最后一行。 输入 gg 可以使得当前光标直接跳转到文件第一行。 3. 输入您曾停留的行号，然后输入大写 G。这样就可以返回到您第一次按下 CTRL-G 时所在的行了。 4. 如果您觉得没问题的话，请执行步骤1至步骤3的操作进行练习。 第四讲第二节：搜索类命令12345678910111213141516171819 ** 输入 / 加上一个字符串可以用以在当前文件中查找该字符串。** 1. 在正常模式下输入 / 字符。您此时会注意到该字符和光标都会出现在屏幕底 部，这跟 : 命令是一样的。 2. 接着输入 errroor &lt;回车&gt;。那个errroor就是您要查找的字符串。 3. 要查找同上一次的字符串，只需要按 n 键。要向相反方向查找同上一次的字 符串，请输入大写 N 即可。 4. 如果您想逆向查找字符串，请使用 ? 代替 / 进行。 5. 要回到您之前的位置按 CTRL-O (按住 Ctrl 键不放同时按下字母 o)。重复按可以 回退更多步。CTRL-I 会跳转到较新的位置。---&gt; &quot;errroor&quot; is not the way to spell error; errroor is an error.提示：如果查找已经到达文件末尾，查找会自动从文件头部继续查找，除非 &apos;wrapscan&apos; 选项被复位。 第四讲第三节：配对括号的查找1234567891011121314151617 ** 输入 % 可以查找配对的括号 )、]、&#125;。** 1. 把光标放在本节下面标记有 --&gt; 那一行中的任何一个 (、[ 或 &#123; 处。 2. 接着按 % 字符。 3. 此时光标的位置应当是在配对的括号处。 4. 再次按 % 就可以跳回配对的第一个括号处。 5. 移动光标到另一个 (、)、[、]、&#123; 或 &#125; 处，按 % 查看其所作所为。---&gt; This ( is a test line with (&apos;s, [&apos;s ] and &#123;&apos;s &#125; in it. ))提示：在程序调试时，这个功能用来查找不配对的括号是很有用的。 第四讲第四节：替换命令12345678910111213141516171819 ** 输入 :s/old/new/g 可以替换 old 为 new。** 1. 请将光标移动到本节中下面标记有 ---&gt; 的那一行。 2. 输入 :s/thee/the &lt;回车&gt; 。请注意该命令只改变光标所在行的第一个匹配 串。 3. 输入 :s/thee/the/g 则是替换全行的匹配串，该行中所有的 &quot;thee&quot; 都会被 改变。---&gt; thee best time to see thee flowers is in thee spring. 4. 要替换两行之间出现的每个匹配串，请 输入 :#,#s/old/new/g 其中 #,# 代表的是替换操作的若干行中 首尾两行的行号。 输入 :%s/old/new/g 则是替换整个文件中的每个匹配串。 输入 :%s/old/new/gc 会找到整个文件中的每个匹配串，并且对每个匹配串 提示是否进行替换。 第五讲小结123456789101112131415161718191. :!command 用于执行一个外部命令 command。 请看一些实际例子： (MS-DOS) (Unix) :!dir :!ls - 用于显示当前目录的内容。 :!del FILENAME :!rm FILENAME - 用于删除名为 FILENAME 的文件。2. :w FILENAME 可将当前 VIM 中正在编辑的文件保存到名为 FILENAME 的文 件中。3. v motion :w FILENAME 可将当前编辑文件中可视模式下选中的内容保存到文件 FILENAME 中。4. :r FILENAME 可提取磁盘文件 FILENAME 并将其插入到当前文件的光标位置 后面。5. :r !dir 可以读取 dir 命令的输出并将其放置到当前文件的光标位置后面。 第五讲第一节：在 VIM 内执行外部命令的方法123456789101112131415 ** 输入 :! 然后紧接着输入一个外部命令可以执行该外部命令。** 1. 按下我们所熟悉的 : 命令使光标移动到屏幕底部。这样您就可以输入一行命令了。 2. 接着输入感叹号 ! 这个字符，这样就允许您执行外部的 shell 命令了。 3. 我们以 ls 命令为例。输入 !ls &lt;回车&gt; 。该命令就会列举出您当前目录的 内容，就如同您在命令行提示符下输入 ls 命令的结果一样。如果 !ls 没起 作用，您可以试试 :!dir 看看。提示：所有的外部命令都可以以这种方式执行，包括带命令行参数的那些。提示：所有的 : 命令都必须以敲 &lt;回车&gt; 键结束。从今以后我们就不会总是提到这一点 了。 第五讲第二节：关于保存文件的更多信息123456789101112131415161718 ** 要将对文件的改动保存到文件中，请输入 :w FILENAME 。** 1. 输入 :!dir 或者 :!ls 获知当前目录的内容。您应当已知道最后还得敲 &lt;回车&gt; 吧。 2. 选择一个未被用到的文件名，比如 TEST。 3. 接着输入 :w TEST (此处 TEST 是您所选择的文件名。) 4. 该命令会以 TEST 为文件名保存整个文件 (Vim 教程)。为了验证这一点， 请再次输入 :!dir 或 :!ls 查看您的目录列表内容。请注意：如果您退出 Vim 然后在以命令 vim TEST 再次启动 Vim，那么该文件内 容应该同您保存时的文件内容是完全一样的。 5. 现在您可以删除 TEST 文件了。在 MS-DOS 下，请输入： :!del TEST 在 Unix 下，请输入： :!rm TEST 第五讲第三节：一个具有选择性的保存命令123456789101112131415161718 ** 要保存文件的部分内容，请输入 v motion :w FILENAME ** 1. 移动光标到本行。 2. 接着按 v 键，将光标移动至下面第五个条目上。您会注意到之间的文本被高亮了。 3. 然后按 : 字符。您将看到屏幕底部会出现 :&apos;&lt;,&apos;&gt; 。 4. 现在请输入 w TEST，其中 TEST 是一个未被使用的文件名。确认您看到了 :&apos;&lt;,&apos;&gt;w TEST 之后按 &lt;回车&gt; 键。 5. 这时 Vim 会把选中的行写入到以 TEST 命名的文件中去。使用 :!dir 或 :!ls 确认文件被正确保存。这次先别删除它！我们在下一讲中会用到它。提示：按 v 键使 Vim 进入可视模式进行选取。您可以四处移动光标使选取区域变大或 变小。接着您可以使用一个操作符对选中文本进行操作。例如，按 d 键会删除 选中的文本内容。 第五讲第四节：提取和合并文件12345678910111213141516 ** 要向当前文件中插入另外的文件的内容，请输入 :r FILENAME ** 1. 请把光标移动到本行上面一行。特别提示：执行步骤2之后您将看到第五讲第三节的文字，请届时往下移动 以再次看到本讲内容。 2. 接着通过命令 :r TEST 将前面创建的名为 TEST 的文件提取进来。 您所提取进来的文件将从光标所在位置处开始置入。 3. 为了确认文件已经提取成功，移动光标回到原来的位置就可以注意有两份第 五讲第三节的内容，一份是原始内容，另外一份是来自文件的副本。提示：您还可以读取外部命令的输出。例如， :r !ls 可以读取 ls 命令的输出，并 把它放置在光标下面。 第六讲小结12345678910111213141516171819201. 输入小写的 o 可以在光标下方打开新的一行并进入插入模式。 输入大写的 O 可以在光标上方打开新的一行。2. 输入小写的 a 可以在光标所在位置之后插入文本。 输入大写的 A 可以在光标所在行的行末之后插入文本。3. e 命令可以使光标移动到单词末尾。4. 操作符 y 复制文本，p 粘贴先前复制的文本。5. 输入大写的 R 将进入替换模式，直至按 &lt;ESC&gt; 键回到正常模式。6. 输入 :set xxx 可以设置 xxx 选项。一些有用的选项如下： &apos;ic&apos; &apos;ignorecase&apos; 查找时忽略字母大小写 &apos;is&apos; &apos;incsearch&apos; 查找短语时显示部分匹配 &apos;hls&apos; &apos;hlsearch&apos; 高亮显示所有的匹配短语 选项名可以用完整版本，也可以用缩略版本。7. 在选项前加上 no 可以关闭选项： :set noic 第六讲第一节：打开类命令12345678910111213141516 ** 输入 o 将在光标的下方打开新的一行并进入插入模式。** 1. 请将光标移动到本节中下面标记有 ---&gt; 的那一行。 2. 接着输入小写的 o 在光标 *下方* 打开新的一行，这个命令会使您 进入插入模式。 3. 然后输入一些文字，之后按 &lt;ESC&gt; 键退出插入模式而进入正常模式。---&gt; After typing o the cursor is placed on the open line in Insert mode. 4. 为了在光标 *上方* 打开新的一行，只需要输入大写的 O 而不是小写的 o 就可以了。请在下行测试一下吧。---&gt; Open up a line above this by typing O while the cursor is on this line. 第六讲第二节：附加类命令123456789101112131415161718 ** 输入 a 将可在光标之后插入文本。 ** 1. 请在正常模式下将光标移动到本节中下面标记有 ---&gt; 的第一行的行首。 2. 接着输入 e 直到光标位于 li 的末尾。 3. 输入小写的 a 则可在光标之后插入文本了。 4. 将单词补充完整，就像下一行中的那样。之后按 &lt;ESC&gt; 键退出插入模式回到 正常模式。 5. 使用 e 移动光标到下一步不完整的单词，重复步骤3和步骤4。---&gt; This li will allow you to pract appendi text to a line.---&gt; This line will allow you to practice appending text to a line.提示：a、i 和 A 都会带您进入插入模式，惟一的区别在于字符插入的位置。 第六讲第三节：另外一个置换类命令的版本123456789101112131415161718 ** 输入大写的 R 可连续替换多个字符。** 1. 请将光标移动到本节中下面标记有 ---&gt; 的第一行。移动光标到第一个 xxx 的 起始位置。 2. 然后输入大写的 R 开始把第一行中的不同于第二行的剩余字符逐一输入，就 可以全部替换掉原有的字符而使得第一行完全雷同第二行了。 3. 接着按 &lt;ESC&gt; 键退出替换模式回到正常模式。您可以注意到尚未替换的文本 仍然保持原状。 4. 重复以上步骤，将剩余的 xxx 也替换掉。---&gt; Adding 123 to xxx gives you xxx.---&gt; Adding 123 to 456 gives you 579.提示：替换模式与插入模式相似，不过每个输入的字符都会删除一个已有的字符。 第六讲第四节：复制粘贴文本1234567891011121314151617181920 ** 使用操作符 y 复制文本，使用 p 粘贴文本 ** 1. 定位到下面标记有 ---&gt; 的一行，将光标移动到 &quot;a)&quot; 之后。 2. 接着使用 v 进入可视模式，移动光标到 &quot;first&quot; 的前面。 3. 现在输入 y 以抽出(复制)高亮的文本。 4. 然后移动光标到下一行的末尾：j$ 5. 接着输入 p 以放置(粘贴)复制了的文本。然后输入：a second &lt;ESC&gt;。 6. 使用可视模式选中 &quot; item.&quot;，用 y 复制，再用 j$ 将光标移动到下一行末尾， 用 p 将文本粘贴到那里。---&gt; a) this is the first item. b) 提示：您还可以把 y 当作操作符来使用；例如 yw 可以用来复制一个单词。 第六讲第五节：设置类命令的选项1234567891011121314151617181920 ** 设置可使查找或者替换可忽略大小写的选项 ** 1. 要查找单词 ignore 可在正常模式下输入 /ignore &lt;回车&gt;。 要重复查找该词，可以重复按 n 键。 2. 然后设置 ic 选项(Ignore Case，忽略大小写)，请输入： :set ic 3. 现在可以通过键入 n 键再次查找单词 ignore。注意到 Ignore 和 IGNORE 现在 也被找到了。 4. 然后设置 hlsearch 和 incsearch 这两个选项，请输入： :set hls is 5. 现在可以再次输入查找命令，看看会有什么效果： /ignore &lt;回车&gt; 6. 要禁用忽略大小写，请输入： :set noic提示：要移除匹配项的高亮显示，请输入： :nohlsearch提示：如果您想要仅在一次查找时忽略字母大小写，您可以使用 c： /ignorec &lt;回车&gt; 第七讲小结123456789101112131. 输入 :help 或者按 &lt;F1&gt; 键或 &lt;Help&gt; 键可以打开帮助窗口。2. 输入 :help cmd 可以找到关于 cmd 命令的帮助。3. 输入 CTRL-W CTRL-W 可以使您在窗口之间跳转。4. 输入 :q 以关闭帮助窗口5. 您可以创建一个 vimrc 启动脚本文件用来保存您偏好的设置。6. 当输入 : 命令时，按 CTRL-D 可以查看可能的补全结果。 按 &lt;TAB&gt; 可以使用一个补全。 第七讲第一节：获取帮助信息123456789101112131415161718192021 ** 使用在线帮助系统 **Vim 拥有一个细致全面的在线帮助系统。要启动该帮助系统，请选择如下三种方法之一： - 按下 &lt;HELP&gt; 键 (如果键盘上有的话) - 按下 &lt;F1&gt; 键 (如果键盘上有的话) - 输入 :help &lt;回车&gt;请阅读帮助窗口中的文字以了解帮助是如何工作的。输入 CTRL-W CTRL-W 可以使您在窗口之间跳转。输入 :q &lt;回车&gt; 可以关闭帮助窗口。提供一个正确的参数给&quot;:help&quot;命令，您可以找到关于该主题的帮助。请试验以下参数(可别忘了按回车键哦)： :help w :help c_CTRL-D :help insert-index :help user-manual 第七讲第二节：创建启动脚本1234567891011121314151617 ** 启用 Vim 的特性 **Vim 的功能特性要比 Vi 多得多，但其中大部分都没有缺省启用。为了使用更多的特性，您得创建一个 vimrc 文件。1. 开始编辑 vimrc 文件，具体命令取决于您所使用的操作系统： :edit ~/.vimrc 这是 Unix 系统所使用的命令 :edit $VIM/_vimrc 这是 MS-Windows 系统所使用的命令2. 接着读取 vimrc 示例文件的内容： :r $VIMRUNTIME/vimrc_example.vim3. 保存文件，命令为： :write下次您启动 Vim 时，编辑器就会有了语法高亮的功能。您可以把您喜欢的各种设置添加到这个 vimrc 文件中。要了解更多信息请输入 :help vimrc-intro 第七讲第三节：补全功能12345678910111213141516171819 ** 使用 CTRL-D 和 &lt;TAB&gt; 可以进行命令行补全 ** 1. 请确保 Vim 不是在以兼容模式运行： :set nocp 2. 查看一下当前目录下已经存在哪些文件，输入： :!ls 或者 :!dir 3. 现在输入一个目录的起始部分，例如输入： :e 4. 接着按 CTRL-D 键，Vim 会显示以 e 开始的命令的列表。 5. 然后按 &lt;TAB&gt; 键，Vim 会补全命令为 :edit 。 6. 现在添加一个空格，以及一个已有文件的文件名的起始部分，例如： :edit FIL 7. 接着按 &lt;TAB&gt; 键，Vim 会补全文件名(如果它是惟一匹配的)。提示：补全对于许多命令都有效。您只需尝试按 CTRL-D 和 &lt;TAB&gt;。 它对于 :help 命令非常有用。 vim 教程到此就结束 本教程只是为了简明地介绍一下 Vim 编辑器，但已足以让您很容易使用这个编辑器了。毋庸质疑，vim还有很多很多的命令，本教程所介绍的距离完整的差得很远。所以您要精通的话，还望继续努力哦。下一步您可以阅读Vim 的用户手册，使用的命令是： :help user-manual 下面这本书值得推荐用于更进一步的阅读和学习： Vim - Vi Improved - 作者：Steve Oualline 出版社：New Riders 这是第一本完全讲解 Vim 的书籍。它对于初学者特别有用。其中包含有大量实例 和图示。 欲知详情，请访问 http://iccf-holland.org/click5.html 以下这本书比较老了而且内容更多是关于 Vi 而非 Vim，但是也值得推荐： Learning the Vi Editor - 作者：Linda Lamb 出版社：O’Reilly &amp; Associates Inc. 这是一本不错的书，通过它您几乎能够了解到任何您想要使用 Vi 做的事情。 此书的第六个版本也包含了一些关于 Vim 的信息。 本教程是由来自 Calorado School of Mines 的 Michael C. Pierce 和Robert K. Ware 所编写的，其中很多创意由来自 Colorado State University 的 Charles Smith 提供。编者的电子邮箱是：bware@mines.colorado.edu本教程已由 Bram Moolenaar 专为 Vim 进行修订。","categories":[{"name":"Notes","slug":"Notes","permalink":"http://www.santotech.tech/categories/Notes/"}],"tags":[{"name":"vim","slug":"vim","permalink":"http://www.santotech.tech/tags/vim/"}],"keywords":[{"name":"Notes","slug":"Notes","permalink":"http://www.santotech.tech/categories/Notes/"}]},{"title":"npm update","slug":"npmUpdate","date":"2016-09-23T13:34:55.000Z","updated":"2016-09-26T01:13:22.776Z","comments":true,"path":"2016/09/23/npmUpdate/","link":"","permalink":"http://www.santotech.tech/2016/09/23/npmUpdate/","excerpt":"","text":"12345/* 查看npm本地版本号和最新版本号 */ npm i npm g/* 安装最新版本npm */ npm -g install npm@version","categories":[{"name":"Notes","slug":"Notes","permalink":"http://www.santotech.tech/categories/Notes/"}],"tags":[{"name":"npm","slug":"npm","permalink":"http://www.santotech.tech/tags/npm/"}],"keywords":[{"name":"Notes","slug":"Notes","permalink":"http://www.santotech.tech/categories/Notes/"}]},{"title":"pullpage","slug":"pullpage","date":"2016-09-22T14:02:11.000Z","updated":"2016-09-26T06:14:06.612Z","comments":true,"path":"2016/09/22/pullpage/","link":"","permalink":"http://www.santotech.tech/2016/09/22/pullpage/","excerpt":"","text":"使用方法 引入文件 12345678910&lt;link rel=\"stylesheet\" href=\"css/jquery.fullPage.css\"&gt;&lt;script src=\"js/jquery.min.js\"&gt;&lt;/script&gt;&lt;!-- jquery.easings.min.js 是必须的，用于 easing 参数，也可以使用完整的 jQuery UI 代替 --&gt;&lt;script src=\"js/jquery.easings.min.js\"&gt;&lt;/script&gt;&lt;!-- 如果 scrollOverflow 设置为 true，则需要引入 jquery.slimscroll.min.js，一般情况下不需要 --&gt;&lt;script src=\"js/jquery.slimscroll.min.js\"&gt;&lt;/script&gt;&lt;script src=\"js/jquery.fullPage.js\"&gt;&lt;/script&gt; HTML 1234567891011&lt;div id=\"fullpage\"&gt; &lt;div class=\"section\"&gt;第一屏&lt;/div&gt; &lt;div class=\"section\"&gt;第二屏&lt;/div&gt; &lt;div class=\"section\"&gt; &lt;div class=\"slide\"&gt;第三屏的第一屏&lt;/div&gt; &lt;div class=\"slide\"&gt;第三屏的第二屏&lt;/div&gt; &lt;div class=\"slide\"&gt;第三屏的第三屏&lt;/div&gt; &lt;div class=\"slide\"&gt;第三屏的第四屏&lt;/div&gt; &lt;/div&gt; &lt;div class=\"section\"&gt;第四屏&lt;/div&gt;&lt;/div&gt; JavaScript 123$(function()&#123; $('#fullpage').fullpage();&#125;); 配置 选项 选项 类型 默认值 说明 verticalCentered 字符串 true 内容是否垂直居中 resize 布尔值 false 字体是否随着窗口缩放而缩放 slidesColor 函数 无 设置背景颜色 anchors 数组 无 定义锚链接 scrollingSpeed 整数 700 滚动速度，单位为毫秒 easing 字符串 easeInQuart 滚动动画方式 menu 布尔值 false 绑定菜单，设定的相关属性与 anchors 的值对应后，菜单可以控制滚动 navigation 布尔值 false 是否显示项目导航 navigationPosition 字符串 right 项目导航的位置，可选 left 或 right navigationColor 字符串 #000 项目导航的颜色 navigationTooltips 数组 空 项目导航的 tip slidesNavigation 布尔值 false 是否显示左右滑块的项目导航 slidesNavPosition 字符串 bottom 左右滑块的项目导航的位置，可选 top 或 bottom controlArrowColor 字符串 #fff 左右滑块的箭头的背景颜色 loopBottom 布尔值 false 滚动到最底部后是否滚回顶部 loopTop 布尔值 false 滚动到最顶部后是否滚底部 loopHorizontal 布尔值 true 左右滑块是否循环滑动 autoScrolling 布尔值 true 是否使用插件的滚动方式，如果选择 false，则会出现浏览器自带的滚动条 scrollOverflow 布尔值 false 内容超过满屏后是否显示滚动条 css3 布尔值 false 是否使用 CSS3 transforms 滚动 paddingTop 字符串 0 与顶部的距离\\ paddingBottom 字符串 0 与底部距离 fixedElements 字符串 无 normalScrollElements 无 keyboardScrolling 布尔值 true 是否使用键盘方向键导航 touchSensitivity 整数 5 continuousVertical 布尔值 false 是否循环滚动，与 loopTop 及 loopBottom 不兼容 animateAnchor 布尔值 true normalScrollElementTouchThreshold 布尔值 5 方法 名称 说明 moveSectionUp() 向上滚动 moveSectionDown() 向下滚动 moveTo(section, slide) 滚动到 moveSlideRight() slide 向右滚动 moveSlideLeft() slide 向左滚动 setAutoScrolling() 设置页面滚动方式，设置为 true 时自动滚动 setAllowScrolling() 添加或删除鼠标滚轮/触控板控制 setKeyboardScrolling() 添加或删除键盘方向键控制 setScrollingSpeed() 定义以毫秒为单位的滚动速度 回调函数 名称 说明 afterLoad 滚动到某一屏后的回调函数，接收 anchorLink 和 index 两个参数，anchorLink 是锚链接的名称，index 是序号，从1开始计算 onLeave 滚动前的回调函数，接收 index、nextIndex 和 direction 3个参数：index 是离开的”页面”的序号，从1开始计算；nextIndex 是滚动到的”页面”的序号，从1开始计算；direction 判断往上滚动还是往下滚动，值是 up 或 down。 afterRender 页面结构生成后的回调函数，或者说页面初始化完成后的回调函数 afterSlideLoad 滚动到某一水平滑块后的回调函数，与 afterLoad 类似，接收 anchorLink、index、slideIndex、direction 4个参数 onSlideLeave 某一水平滑块滚动前的回调函数，与 onLeave 类似，接收 anchorLink、index、slideIndex、direction 4个参数","categories":[{"name":"Plugin","slug":"Plugin","permalink":"http://www.santotech.tech/categories/Plugin/"}],"tags":[{"name":"javascript","slug":"javascript","permalink":"http://www.santotech.tech/tags/javascript/"},{"name":"jquery","slug":"jquery","permalink":"http://www.santotech.tech/tags/jquery/"}],"keywords":[{"name":"Plugin","slug":"Plugin","permalink":"http://www.santotech.tech/categories/Plugin/"}]},{"title":"bootstrap","slug":"bootstrap","date":"2016-09-21T06:35:30.000Z","updated":"2016-09-26T03:30:50.978Z","comments":true,"path":"2016/09/21/bootstrap/","link":"","permalink":"http://www.santotech.tech/2016/09/21/bootstrap/","excerpt":"","text":"This is a code snippet for of bootstrap1234&lt;div class=\"row\"&gt; &lt;div class=\"col-md-8\"&gt;.col-md-8&lt;/div&gt; &lt;div class=\"col-md-4\"&gt;.col-md-4&lt;/div&gt;&lt;/div&gt;","categories":[{"name":"Bootstrap","slug":"Bootstrap","permalink":"http://www.santotech.tech/categories/Bootstrap/"}],"tags":[{"name":"bootstrap","slug":"bootstrap","permalink":"http://www.santotech.tech/tags/bootstrap/"}],"keywords":[{"name":"Bootstrap","slug":"Bootstrap","permalink":"http://www.santotech.tech/categories/Bootstrap/"}]}]}